Set up app
    >>> from server import app, session
    >>> from seed import load_users, load_access_codes, load_one_time_passwords, load_home_app_data, \
                         load_home_resources, load_communities, load_community_boards, load_community_board_posts, \
                         load_community_events, load_community_resources, load_states_regions, \
                         load_state_region_resources, load_global_resources
    >>> client = app.test_client()

Set up fake database
    >>> from model import db
    >>> from model import User
    >>> import os
    >>> os.system("dropdb testdb --if-exists")
    0
    >>> os.system("createdb testdb")
    0
    >>> app.config['SQLALCHEMY_ECHO'] = False
    >>> app.config['SQLALCHEMY_DATABASE_URI'] = 'postgresql:///testdb'
    >>> app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
    >>> db.app = app
    >>> db.init_app(app)

    >>> db.create_all()

Create tables with test data.
    >>> db.create_all()
    >>> load_users("_test_data/u.user")
    Users
    0
    >>> load_access_codes("_test_data/u.item")
    Access_Codes
    0
    >>> load_one_time_passwords("_test_data/u.data")
    One_Time_Passwords
    0
    >>> load_home_app_data("_test_data/u.data")
    Home_App_Data
    0
    >>> load_home_resources("_test_data/u.data")
    Home_Resources
    0
    >>> load_communities("_test_data/u.data")
    Communities
    0
    >>> load_community_boards("_test_data/u.data")
    Community_Boards
    0
    >>> load_community_board_posts("_test_data/u.data")
    Community_Board_Posts
    0
    >>> load_community_events("_test_data/u.data")
    Community_Events
    0
    >>> load_community_resources("_test_data/u.data")
    Community_Resources
    0
    >>> load_states_regions("_test_data/u.data")
    States_Regions
    0
    >>> load_state_region_resources("_test_data/u.data")
    State_Region_Resources
    0
    >>> load_nations("_test_data/u.data")
    Nations
    0
    >>> load_national_resources("_test_data/u.data")
    National_Resources
    0
    >>> load_global_resources("_test_data/u.data")
    Global_Resources
    0

Check registration
    >>> r = client.get("/register")
    >>> assert '<form action="register" method="POST">' in str(r.data)
    >>> r = client.post("/register", data={'email': "jhacks@hb.com", 'password':"test", 'age':"42", 'zipcode':"94107"}, follow_redirects=True)
    >>> assert "User jhacks@hb.com added." in str(r.data)

Check log in and log out
    >>> with app.test_client() as c:
    ... 	r = c.post("/login", data={'email': "jhacks@hb.com", 'password':"test"}, follow_redirects=True)
    ...	 	assert "Logged in" in str(r.data)
    ...		assert "user_id" in session
    ... 	r = c.get("/logout", follow_redirects=True)
    ... 	assert "Logged Out." in str(r.data)
    ... 	assert "user_id" not in session

    >>> r = client.post("/login", data={'email': "jhacks@hb.com", 'password':"test-wrong"}, follow_redirects=True)
    >>> assert "Incorrect password" in str(r.data)

Clean up 
    >>> db.session.close()
    >>> db.session.remove()
    >>> db.drop_all()
    >>> db.engine.dispose()